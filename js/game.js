const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// ËÆæÁΩÆÁîªÂ∏ÉÂ§ßÂ∞è
canvas.width = 800;
canvas.height = 600;

// ÂÆö‰πâÂç¶Ë±°
const hexagrams = [
    "‰πæÂç¶", "Âù§Âç¶", "Â±ØÂç¶", "ËíôÂç¶", "ÈúÄÂç¶", "ËÆºÂç¶", "Â∏àÂç¶", "ÊØîÂç¶",
    // ... ÂÖ∂‰ªñÂç¶Ë±°
];

// Ê∏∏ÊàèÁä∂ÊÄÅ
let currentHexagram = "";
let isAnimating = false;

// Ê∑ªÂä†Adsgram SDK
let adInstance;
let adSDKLoaded = false;
let adSDKFailed = false;
let adLoadAttempts = 0;
const MAX_AD_LOAD_ATTEMPTS = 3;

// Ê∑ªÂä†Adsgram SDK
function loadAdSDK() {
    if (adLoadAttempts >= MAX_AD_LOAD_ATTEMPTS) {
        adSDKFailed = true;
        console.error('Max attempts reached. Ad service is unavailable.');
        return;
    }

    const script = document.createElement('script');
    script.src = 'https://sad.adsgram.ai/js/sad.min.js'; // ‰ΩøÁî®ÊÇ®Âú® HTML ‰∏≠Êèê‰æõÁöÑ URL
    script.async = true;

    let timeoutId;

    script.onload = () => {
        clearTimeout(timeoutId);
        console.log('Adsgram SDK script loaded successfully');
        adSDKLoaded = true;
        initAdsgram();
    };

    script.onerror = (error) => {
        clearTimeout(timeoutId);
        console.error('Failed to load Adsgram SDK:', error);
        console.log('Script src:', script.src);
        console.log('Network status:', navigator.onLine ? 'Online' : 'Offline');
        adLoadAttempts++;
        if (adLoadAttempts < MAX_AD_LOAD_ATTEMPTS) {
            console.log(`Retrying to load SDK. Attempt ${adLoadAttempts + 1} of ${MAX_AD_LOAD_ATTEMPTS}`);
            setTimeout(loadAdSDK, 5000); // 5ÁßíÂêéÈáçËØï
        } else {
            adSDKFailed = true;
            console.error('Max attempts reached. Ad service is unavailable.');
        }
    };

    timeoutId = setTimeout(() => {
        script.onerror(new Error('Timeout'));
    }, 10000); // 10ÁßíË∂ÖÊó∂

    document.head.appendChild(script);
}

// Âú®È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂä†ËΩΩ SDK
window.addEventListener('load', () => {
    console.log('Window loaded, attempting to load Adsgram SDK');
    loadAdSDK();
});

// Âú®Êñá‰ª∂È°∂ÈÉ®Ê∑ªÂä†Ëøô‰∏™ÂáΩÊï∞
function getTelegramUserId() {
    if (window.Telegram && window.Telegram.WebApp) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        if (user && user.id) {
            console.log('Telegram user ID obtained:', user.id);
            return user.id.toString();
        }
    }
    console.warn('Telegram user ID not available. Using default test ID.');
    return 'test_user_123'; // ÈªòËÆ§ÊµãËØï ID
}

// ÊõøÊç¢Áé∞ÊúâÁöÑ userTelegramId Â£∞Êòé
let userTelegramId = getTelegramUserId();

// Âú® initializeAdSDK ÂáΩÊï∞‰∏≠‰ΩøÁî®Ëøô‰∏™ ID
function initializeAdSDK() {
    if (adSDKLoaded && typeof Adsgram !== 'undefined') {
        console.log('Initializing Adsgram SDK');
        try {
            adInstance = new Adsgram.Instance({
                blockId: '2818',
                rewardUrl: `https://test.adsgram.ai/reward?userid=${userTelegramId}`
            });
            console.log('Adsgram SDK initialized successfully');
        } catch (error) {
            console.error('Error initializing Adsgram SDK:', error);
            adSDKFailed = true;
            showErrorMessage('Failed to initialize ad service. Please try again later.');
        }
    } else if (!adSDKFailed) {
        console.log('Adsgram SDK not ready, retrying in 1 second');
        setTimeout(initializeAdSDK, 1000);
    }
}

// ÊòæÁ§∫ÂπøÂëäÁöÑÂáΩÊï∞
function showAd() {
    console.log('showAd function called');
    showErrorMessage('ÂπøÂëäÂäüËÉΩÊöÇÊó∂‰∏çÂèØÁî®„ÄÇËØ∑Á®çÂêéÂÜçËØï„ÄÇ');
    // ... ÂÖ∂‰Ωô‰ª£Á†Å‰øùÊåÅ‰∏çÂèò
}

function showRewardMessage() {
    // ÂÆûÁé∞ÊòæÁ§∫Â•ñÂä±Ê∂àÊÅØÁöÑÈÄªËæë
    drawText("Reward received!", canvas.width / 2, canvas.height / 2, 30, "#FFD700");
}

function showErrorMessage(message = 'An error occurred. Please try again.') {
    // ÂÆûÁé∞ÊòæÁ§∫ÈîôËØØÊ∂àÊÅØÁöÑÈÄªËæë
    drawText(message, canvas.width / 2, canvas.height / 2, 30, "#FF0000");
}

// ÁªòÂà∂ËÉåÊôØ
function drawBackground() {
    ctx.fillStyle = "#000";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
}

// ÁªòÂà∂ÊñáÊú¨
function drawText(text, x, y, fontSize = 30, color = "#fff") {
    ctx.font = `${fontSize}px Arial`;
    ctx.fillStyle = color;
    ctx.textAlign = "center";
    ctx.fillText(text, x, y);
}

// ÁªòÂà∂ÊåâÈíÆ
function drawButton(text, x, y, width, height) {
    ctx.fillStyle = "#4CAF50";
    ctx.fillRect(x, y, width, height);
    drawText(text, x + width / 2, y + height / 2 + 10, 20, "#fff");
}

// Âä®ÁîªÊïàÊûú
function animate() {
    if (!isAnimating) return;
    
    const randomIndex = Math.floor(Math.random() * hexagrams.length);
    currentHexagram = hexagrams[randomIndex];
    
    setTimeout(() => {
        requestAnimationFrame(animate);
    }, 100);
}

// ÂºÄÂßãÁÆóÂç¶
function startDivination() {
    isAnimating = true;
    animate();
    setTimeout(() => {
        isAnimating = false;
    }, 2000);
}

// Ê£ÄÊü•Èº†Ê†áÁÇπÂáª
canvas.addEventListener('click', (event) => {
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    if (showIntro) {
        if (x >= 300 && x <= 500 && y >= 550 && y <= 600) {
            showIntro = false;
        }
    } else {
        if (x >= 300 && x <= 500 && y >= 400 && y <= 450) {
            startDivination();
        } else if (x >= 300 && x <= 500 && y >= 470 && y <= 520) {
            console.log('Watch Ad button clicked');
            showAd();
        }
    }
});

// Ê∑ªÂä† Adsgram Áõ∏ÂÖ≥‰ª£Á†Å
let AdController;

// ÂàùÂßãÂåñ Adsgram SDK
function initAdsgram() {
    if (window.Adsgram) {
        try {
            AdController = window.Adsgram.init({ blockId: "2818" }); // ‰ΩøÁî®ÊÇ®ÁöÑÂÆûÈôÖ blockId
            console.log('Adsgram initialized successfully');
        } catch (error) {
            console.error('Error initializing Adsgram:', error);
            showErrorMessage('Failed to initialize ad service. Please try again later.');
        }
    } else {
        console.error('Adsgram SDK not available');
        showErrorMessage('Ad service is not available. Please try again later.');
    }
}

// ‰øÆÊîπ showAd ÂáΩÊï∞
function showAd() {
    console.log('showAd function called');
    if (AdController) {
        AdController.show().then((result) => {
            console.log('Ad watched successfully');
            onReward();
        }).catch((result) => {
            console.error('Ad error:', result);
            onError(result);
        });
    } else {
        showErrorMessage('Ad service is not available. Please try again later.');
    }
}

function onReward() {
    console.log('Reward received');
    showRewardMessage();
}

function onError(result) {
    console.error('Ad error:', result);
    showErrorMessage(result.description || 'An error occurred with the ad');
}

// Âú®È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ Adsgram
window.addEventListener('load', () => {
    console.log('Window loaded, initializing Adsgram');
    initAdsgram();
});

// ‰øÆÊîπÊ∏∏ÊàèÂæ™ÁéØ
function gameLoop() {
    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw background
    drawBackground();

    if (showIntro) {
        // Draw intro text
        drawText("Taiji Divination", canvas.width / 2, 50, 40);
        for (let i = 0; i < introText.length; i++) {
            drawText(introText[i], canvas.width / 2, 100 + i * 30, 16);
        }
        drawButton("Start Divination", 300, 550, 200, 50);
    } else {
        // Draw title
        drawText("Taiji Divination", canvas.width / 2, 100, 40);

        // Draw current hexagram
        drawText(currentHexagram, canvas.width / 2, 250, 60);

        // Draw divination button
        drawButton("Start Divination", 300, 400, 200, 50);

        // Draw watch ad button
        drawButton("Watch Ad", 300, 470, 200, 50);
    }

    if (adSDKFailed) {
        drawText("ÂπøÂëäÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®", canvas.width / 2, 550, 20, "#FF0000");
    } else if (!adSDKLoaded) {
        drawText("Ê≠£Âú®Âä†ËΩΩÂπøÂëäÊúçÂä°...", canvas.width / 2, 550, 20, "#FFFF00");
    }

    if (!AdController) {
        drawText("Ad service not initialized", canvas.width / 2, 550, 20, "#FFFF00");
    }

    // Continue the loop
    requestAnimationFrame(gameLoop);
}

// Add new variables for the intro text
let showIntro = true;
const introText = [
    "Unlock Ancient Wisdom, Glimpse Your Future!",
    "Welcome to 'Taiji Divination,' a unique mini-game",
    "that blends traditional I Ching wisdom with modern technology.",
    "",
    "üîÆ Experience mystical hexagram drawing",
    "üåü Receive cosmic guidance",
    "üé≠ Uncover life's joys and sorrows",
    "",
    "Every click is a dialogue with destiny.",
    "Let the power of Taiji guide you and reveal hidden truths in your life.",
    "",
    "Are you ready? Click 'Start Divination' to begin!",
    "",
    "Note: This game is for entertainment purposes only.",
    "Please approach divination results rationally."
];

// ÂºÄÂßãÊ∏∏ÊàèÂæ™ÁéØ
gameLoop();

// ÁßªÈô§ÈáçÂ§çÁöÑ gameLoop Ë∞ÉÁî®
// gameLoop();